[["basics-of-data-visualisation.html", "Chapter 4 Basics of Data Visualisation 4.1 Base package 4.2 ggplot 4.3 Exporting plots", " Chapter 4 Basics of Data Visualisation body { text-align: justify} Data visualization is, in our opinion, a remarkably important part of data analysis. Data visualization can be exploratory or explanatory. In the first case, it could allow us to check if the data has errors, or if there are any trends that we would like to explore further. In the second case, it would allow us to communicate and publish our results to other, in a way to evidenciate what our data are trying to say. Of course, for the second case, plots should usually come along with the adequate statistical tests for the matter. Trough this chapter, we will see the very basics of data visualization with two of the most used packages in R, which are the Base Package and ggplot. 4.1 Base package This is the package that comes with R. It is maybe the easiest package to use, but it is less flexible. Some basic functions are: plot() hist() barplot() boxplot() 4.1.1 Plot vs. Index If we use the most basic of functions, plot() , and we only indicate one variable, the other axis will be automatically assigned to an index value. This means that data will be plotted as they appear in the data frame. #First we upload our data mydata &lt;- read.csv(&quot;tomatoMLT2020.csv&quot;) #The we fill the plot function with only one argument plot(mydata$yield) This could be useful to know if, in a given section of the data frame, the observations are notably different than the rest. In this case, because data are arranged by environment, this area of high points in the center indicate the presence of a very productive environment. 4.1.2 Scatter plot This is a kind of plot you can use if you have two quantitative variables. plot( x= mydata$yield, # The x axis is the total yield. y= mydata$farmers_eval) # The y axis is the farmer&#39;s evaluation. 4.1.3 Histogram Histograms are very useful to understand the distribution of the data In this case, we use the variable of the farmers evaluation, set in a scale from 1 to 5. Normally, for most quantitative biological data, we could expect a normal distribution. hist(mydata$farmers_eval) On the same histogram, we could do further elaborations to make it look better. We could add a main title, labels for the axes, define the number of breaks or columns, and select the name of the color, from this list. hist(x= mydata$farmers_eval, #Variable to plot main= &quot;Histogram for Farmer&#39;s Evaluation in Tomato PPB trials&quot;, #Main Title xlab= &quot;Evaluation&quot;, ylab= &quot;Frequency&quot;, #Axis titles breaks= 12, #How many breaks or columns col= &quot;coral&quot;) #Color Elements can be added after a plot was called. For example, in this case, we can add a vertical line to the plot, and we could position that line exactly in the mean value for yield. hist(x= mydata$farmers_eval, main= &quot;Histogram for Farmer&#39;s Evaluation in Tomato PPB trials&quot;, xlab= &quot;Evaluation&quot;, ylab= &quot;Frequency&quot;, breaks= 12, col= &quot;coral&quot;) abline(v= mean(mydata$farmers_eval), # Vertical line set at the mean value col = &quot;dodgerblue&quot;, # Line color lwd= 4) # Line width Box plot Another useful way to plot information is through a boxplot which not only presents the mean values, but also the quartile distribution. It would be useful, for example to compare the overall yields of the different varieties (or in the different environments). However, for this kind of plot to work, we need at least one of the variables to be a factor. We can check the variable types with the str() function, and see that both the variety and the location are interpreted as characters str(mydata) ## &#39;data.frame&#39;: 112 obs. of 11 variables: ## $ location : chr &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; ... ## $ plot : int 1 2 3 4 5 6 7 8 9 10 ... ## $ rep : int 1 1 2 2 1 1 2 2 1 1 ... ## $ row : int 1 2 3 4 1 2 3 4 1 2 ... ## $ col : int 1 1 1 1 2 2 2 2 3 3 ... ## $ variety : chr &quot;Var. A&quot; &quot;Var. D&quot; &quot;Var. I&quot; &quot;Var. N&quot; ... ## $ farmers_eval : num 3.24 2.71 3.35 3.24 3.24 3.06 2.88 3.24 2.94 2.88 ... ## $ yield : num 789 498 822 846 1083 ... ## $ yield_first : num 11 0 24.9 46.8 28.2 ... ## $ perc_mark_yield : num 57.5 55.8 76 55.3 81.2 ... ## $ mean_fruit_weight: num 17.43 7.37 35.54 14.19 68.85 ... We can change that easily with the as.factor() function. What we do is that replace the actual column we have, with the same column interpreted as a factor. mydata$variety &lt;- as.factor(mydata$variety) mydata$location &lt;- as.factor(mydata$location) Now we can do the boxplot. By using the function plot() with a quantitative and a factor variable, a boxplot is automatically generated plot(x= mydata$location, y= mydata$yield, ylab= &quot;Yield (kg)&quot;, xlab = &quot;Location&quot;) 4.2 ggplot ggplot is one of the most used and versatile packages to do graphics in R. gg stands for grammar of graphics, and it is based on a modular system that allows you to build your plots feature by feature. It can be easily installed with install.packages() (only once) and called with library() (every time that you open an R Session). install.packages(&quot;ggplot2&quot;) library(ggplot2) The most important thing in ggplot is that every feature should be included as a layer. The main function is ggplot() , and the main arguments are the data frame that you are using, and aes() , that stands for aestithics and lets you choose the parameters for the graph. We could do one first try. ggplot(data= mydata, # my data frame aes(x=variety, # my x axis y=yield)) # my y axis and the (very important) closure of parenthesis We have created the plot and its coordinates, but we have not assigned any geometrical object yet. At this point, we could add bars, points, lines, boxes, etc. We will see how to do that next. 4.2.1 Box Plot For a box plot, we write the same code and add the function geom_boxplot() , which can be empty of arguments, as the indispensable ones have already been declared. However, because I want my boxes to be gray, I can specify it as an argument. ggplot(data= mydata, aes(x=variety, y=yield))+ geom_boxplot(fill = &quot;gray&quot;) On top of the boxes, I could choose to plot every individual observation with a point, and, if I wish too, I could color those points according to the corresponding location. Notice that now, the color argument is inside an aes() function, because we are not assigning an arbitrary color for all points, but rather making them vary according to a parameter present in the data frame. ggplot(data= mydata, aes(x=variety,y=yield))+ geom_boxplot(fill = &quot;gray&quot;)+ geom_point(aes(col = location)) Overall, there is a large deal of different geometries that can be used, alone or in combinations, to represent data in many ways. In that case, a very handy ressource for geometries in ggplot is the specially designed Cheat Sheet that they offer. Finally, if you find it akward, or too bulky two have all the information from all the locations in one plot. You could easily make a small subplot, ie. a facet, for every location. Both functions facet_wrap() and facet_grid() can do this in slightly different ways. If we do this, it is convenient to remove the points colored by location. The plot would look like this: ggplot(data= mydata, aes(x=variety,y=yield))+ geom_boxplot(fill = &quot;gray&quot;)+ facet_wrap(location~., # I choose to plot my locations, # the &quot;~&quot; sign means allows me introduce another variable to # to subdivide the plots, but I choose none so we just write &quot;.&quot; ncol =1, scales= &#39;free&#39;) # Additionally, we want all the subplots the be drawn in only one column 4.2.2 Scatter plots If I choose to plot two quantitative variables against one another, and choose the geom_point() for each each point, a very useful scatter plot will come out. What is more, I could add a fitted line according to a linear model (or one of other models available). ggplot(data= mydata, aes(y=farmers_eval , x=yield))+ geom_point()+ geom_smooth(method= lm) #Regression line with Linear Method (lm) ## `geom_smooth()` using formula &#39;y ~ x&#39; To this point, some evident effect of correlation can be seen between the yield and the farmers evaluation. But we see clearly a cloud of points in the upper right, which correspond normally to our highest yielding location. We could, for example, divide environments with facet_wrap() and add a small label to each point trough geom_text() or geom_label , indicating the corresponding variety ggplot(data= mydata, aes(y=farmers_eval , x=yield))+ geom_point()+ geom_smooth(method= lm)+ facet_wrap(location~., ncol=2, scales= &#39;free&#39;)+ geom_text(aes(label = variety), # we define the variety as the parameter size= 2, nudge_y =0.1 ) # and we put the small so that they don&#39;t overlap ## `geom_smooth()` using formula &#39;y ~ x&#39; plot.cor.stats &lt;-plot.cor + stat_cor(label.y= 4) # Largumento label.y ci da la posizione del testo plot.cor.stats 4.2.3 Bar plots This section is under progress! 4.3 Exporting plots There are mainly two ways to export a package: by clicking manually or through R code. By clicking manually. Once you created your plot and you see it on the lower left panel, you can click on Export, then select your desired parameters, and save it on your WD (or elsewhere). By code If you want to be more automatic, you can use code to export and save your image. The functions png() of jpg() can help you in this sense. To do this, you have to assign a create your ggplot, and then run your prefered function, specifying the output name and dimensions. At the end its important to use dev.off() to indicate that your export device has been closed. ggplot(data= mydata, aes(y=farmers_eval , x=yield))+ geom_point()+ geom_smooth(method= lm) #Regression line with Linear Method (lm) png(&quot;myplot.png&quot;, width= 300, height= 300) dev.off() "]]
