[["first-steps-in-r.html", "Chapter 3 First Steps in R 3.1 Getting started 3.2 Preparing and reading your data 3.3 Basic data manipulation 3.4 Basic Statistics and Plots 3.5 Packages in R. 3.6 Final considerations", " Chapter 3 First Steps in R body { text-align: justify} If you already know the basics of R, you can skip this section and go straight to the next chapter! 3.1 Getting started If not, many ressources are available on line to master the language and procedures on R. If you are interested, we suggest some of them at the end of this chapter. However, this first chapter gives the most basic elements of R that will be useful later on, for the objetives of this PPB Toolkit. At this point, if you do not have it already, we suggest you to download the programming language R in this link and RStudio, the associated Integrated Development Environment in this link. Alternatively, you can try the cloud version R studio cloud, but have in mind that most explanations in this toolkit will be done according to a locally downloaded version. The RStudio Screen If at this point, you have downloaded and opened RStudio, you should be looking at something similar to the image in Figure 1 (This image is provisory). In order to facilitate communication between us and to properly navigate through the RStudio screen later on, some precisions must be made about this. Figure 1. The RStudio Screen. 1: The Text Editor. 2: The Environment. 3: The Plots. 4: The Console. The RStudio screen is normally divided into 4 large panels. Different tools could be assigned to those 4 panels, and their order can be inverted. However, we will here describe the most commons uses for the standard positions of these panels. The text editor (1) usually appears at the upper left cuadrant. It is evidently where most typing happens and what is typed can then be saved in the form of a script. The console (2) is at lower left cuadrant, every line of code run passes through here, and it is also where results are usually shown. Also, when an error occurs, the explanation of the error appears here. Moreover, some other features might be shown in this cuadrant if decided by the user, such as the Terminal and R Markdown (which will not be covered in this toolkit). The upper right corner (3) usually shows us the objects that are present in the R environment. We will later on see what objects can be and how to use them. The lower right cuadrant (4) is one of the most versatile spaces. It can be used to see the plots, to browse for files and to ask for help. Basic operations. R can be thought simply like a calculator (but a very powerful one). Start by writing on the console 1+1, and then click the Enter button. 1+1 ## [1] 2 The first strip is what we typed, and the second shows the result of the request. The [1] symbol indicates that this is the first line of answer, and the only element present is a 2. Later on, we will see that certain operations will produce several lines of answers, so it is useful that results are ordered by numbers. Try to type now 1+1 on the text editor. Once typed, you can click on the Run button on the upper right to see the same results. Or alternatively (and faster), you can just type Ctrl+Enter while the cursor is on that line. 1+1 ## [1] 2 We should expect the same results by performing operations directly on the console or on the text editor. However, the text editor is more flexible, because you can save all your text as a script, and rerun it later. Basic Arithmetics Lets explore a bit of other arithmetic functions. For example, if you want to multiply 6 times 9, just type \"6*9\" in the text editor and hit Ctrl+Enter: 6*9 ## [1] 54 Or maybe you want to divide 3 by 2. 3/2 ## [1] 1.5 Perhaps you are interested in estimating the square root of 2. sqrt(2) ## [1] 1.414214 Or in calculating 10 to the power of 2. 10^2 ## [1] 100 Basic functions Functions are the base of R. Internally, they contain the operations that we want to execute. They are always written followed by a parenthesis and everything that is between parenthesis is called arguments . You can learn more about each function by typing the ? symbol, followed by the name of the function. Three simple examples of useful functions: Concatenate = c() Mean = mean() Standard deviation = sd() How to use them? Use c() to put together a set of elements. In this case, numbers. c(1,2,3,4) ## [1] 1 2 3 4 Use mean() to estimate the mean of the four elements inside the c() function. mean(c(1,2,3,4)) ## [1] 2.5 You can do the same, but with sd(), to estimate the standard deviation sd (c(1,2,3,4)) ## [1] 1.290994 Objects The term Object refers to most of the information stored in your R session. An object can be a number, a character, a dataframe, a plot, or other things. You can see your objects in the upper right window of RStudio, called Environment. You can create objects by using  =  o  &lt;- , although the latter is generally prefered. For example, create an object called x, containing the numbers 1, 2 and 3. x = c(1,2,3) x ## [1] 1 2 3 Or create and object called myvector, with all numbers from 1 to 5. The : symbol indicated that every number between 1 and 5 will be included. myvector= c(1:5) myvector ## [1] 1 2 3 4 5 Now, you should see in the upper right window your two newly created objects, called x and myvector. Two important notes: When you create an object, it does not appear automatically in the console. To actually see the object you created, you have to call it by writing its name on the text editor and typing Ctrl+Enter. Or, by writing it on the console and hitting simply Enter. Attention to ortography and lower/upper cases!! MyVector is not myvector (typos make up the most common errors for R begginers) Saving your script. You can save your script to work on it later, and, in that way, you have a proper register of the analysis you did.Its very useful to create a folder in your computer for every project you do in R. We invite you to create a folder on your documents and call it R PPB toolkit or whatever name you like better. Once created, you can save the script in which you are working by clicking on: File &gt; Save As &gt; Choose your folder and save your script as myscript.R. (Its important to finish with .R, to indicate your file format.) 3.2 Preparing and reading your data Setting up your Working Directory. The Working Directory (WD) is a very important concept, and it is simply the folder in which you are working. This folder should work both for uploading files and placing the outputs of your work. The most important things to di regarding your WD are: 1. Knowing which folder is your actual WD, by using getwd() getwd() ## [1] &quot;C:/Users/Usuario1/Documents/Github/PPB-Toolkit&quot; *This is our working directory in our computer, but yours will be inevitably named diferently. 2. Fixing your WD by writing setwd(Folder Location) setwd(&quot;C:/Users/Usuario1/Documents/Github/PPB-Toolkit&quot;) So, I set my WD to a file inside my Google Drive Folder, inside a folder called RSR, and finally, into one called PPB Toolkit. This step is specially tricky and works differently in PC and Mac. You should be sure that you can type precisely the location on your computer. Alternatively, you can follow step 3. 3. Fixing your WD by clicking. You can also set your WD by clicking on RStudio. Session &gt; Set Working Directory &gt; Choose Directory &gt; Manually locate your folder. This is useful because chances of typos and errors are reduced, but, if you have to do it every time you open RStudio, it might be annoying. *After doing this, you will see on the console that a code was automatically written, using the setwd(function). A nice trick is to copy and paste this direction into your script (inside the setwd() function), so that you are sure that is it typed correctly. Preparing your data. Normally, after evaluations in the field or in the laboratory, data is usually stored in a spreadsheet format in Excel, Google Sheets or other similar options. In those files, data should be kept in a format that is as tidy as possible, to facilitate further elaborations. The fundamentals of tidy data can be found here. In this toolkit we will work mostly with data from a tomato PPB project developed in Italy (I would like to also add data from another source, maybe later). For this case, the data corresponds to a Multi Location Trial (MLT) done in 2020 at 4 different locations. The material evaluated came from a composite cross of 4 different landraces, and subjected to Natural Selection or Farmers Selection. However, to simplify this toolkit, varieties were simply named from A to N, as there were 14 different genotypes. Data also includes variables like mean of farmers evaluations, the yield at first harvest, the total yield, the mean fruit weight and the percentage of marketable yield (as defined by the farmers). Figure 2. Snapshot of the spreadsheet containing the data from the tomato Multi-Location Trial as part of a PPB program. Moreover, there are some general advices that can be given about the format of the data to upload. For the column names, it is convenient to use short but explanative names and to avoid spaces. This allows for less problems in the analysis. That is why, for example, column 7 on Figure 2 reads farmers_eval instead of Farmers Evaluation. If you data frame has missing data, it is convenient to use always the same character as data frame indicator. It can be a \"*\" or even NA, but, for now, avoid leaving blanks for the missing data. Uploading the data. Data can be uploaded to R studio directly from the spreadsheet file in a excel format. However, the best way to do it is transforming your file into a comma separated values or .csv file. This is a lighter and easier to read format for most programs. To convert your spreadsheet into this format, you just have to click on Save As, and choose the option CSV (comma delimited). You can know if you did it right if you open the same document in a text editor, such as Word or Notepad, and you see that now your rows have become just a long string of text separated with commas. Once your data file is on .csv format and saved in the folder you choose for Working Directory, you can upload it this way. mydata &lt;- read.csv(&quot;tomatoMLT2020.csv&quot;) In this case, we knew that there was a file called tomatoMLT2020.csv in our working directory. So, through this line, we are at the same time reading the data, and assigning it to an object called mydata Another way to do this would be be clicking Import Database &gt; From text(base) &gt; Manually choose and select your file. In that case, you will see that the code required to perform that operation will be automatically written on the console. Moreover, off course that you can also import files that are in a excel format. You could, for example, click on: Import Database &gt; From Excel &gt; Manually choose and select your file. Or, as well, use the required function. mydata &lt;- read_excel(&quot;tomatoMLT2020.xlsx&quot;) More information about this importing data into R can be found here. Checking your data It is generally convenient to check your data once you have uploaded it. This way, you make sure that you are choosing the right file and that no information was loss or distorted in the uploading process. Once you have uploaded the data, you can ask questions through R about the data, for example: What is the structure of my data? str(mydata) ## &#39;data.frame&#39;: 112 obs. of 11 variables: ## $ location : chr &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; ... ## $ plot : int 1 2 3 4 5 6 7 8 9 10 ... ## $ rep : int 1 1 2 2 1 1 2 2 1 1 ... ## $ row : int 1 2 3 4 1 2 3 4 1 2 ... ## $ col : int 1 1 1 1 2 2 2 2 3 3 ... ## $ variety : chr &quot;Var. A&quot; &quot;Var. D&quot; &quot;Var. I&quot; &quot;Var. N&quot; ... ## $ farmers_eval : num 3.24 2.71 3.35 3.24 3.24 3.06 2.88 3.24 2.94 2.88 ... ## $ yield : num 789 498 822 846 1083 ... ## $ yield_first : num 11 0 24.9 46.8 28.2 ... ## $ perc_mark_yield : num 57.5 55.8 76 55.3 81.2 ... ## $ mean_fruit_weight: num 17.43 7.37 35.54 14.19 68.85 ... This function is particularly useful, as you can see the data type of your columns. They might be characters, numerics, integrers (numbers without decimals) and factors, among others. For example, in this case, the location and the variety are read as characters, while they should be factors. We will soon see how to change this. We could, also do more specifical questions, like how many columns do I have? Or how many rows? What are the names of my variables? ncol(mydata) ## [1] 11 nrow(mydata) ## [1] 112 names(mydata) ## [1] &quot;location&quot; &quot;plot&quot; &quot;rep&quot; ## [4] &quot;row&quot; &quot;col&quot; &quot;variety&quot; ## [7] &quot;farmers_eval&quot; &quot;yield&quot; &quot;yield_first&quot; ## [10] &quot;perc_mark_yield&quot; &quot;mean_fruit_weight&quot; Maybe you only want to see the first 10 rows, pr only the last 10 rows. head(mydata) tail(mydata) Of course, you can always choose your data in spreadsheet format. View(mydata) This does not appear in the book format, but in your RStudio screen, it will make a new tab appear with your data in a spreadsheet format. Bottomline, we advice to always check your data when uploading. Specifically, check the data type of each variable, as this might lead to problems during the analysis and manipulation. 3.3 Basic data manipulation Accesing your data Before performing statistic analysis, it is useful to understand how you can call a specific column or row in R, so that you can easiliy access your data. Here are two basic examples. To access a specific column, you can use the data frame name, followed by the $ operator and the column name. For example, if I wanted to see every data point on my yield column, I could type. mydata$yield ## [1] 789.25 497.75 821.90 846.50 1083.23 750.49 719.00 1163.00 854.72 ## [10] 766.25 791.25 1023.18 1004.11 906.84 830.79 953.52 906.25 831.25 ## [19] 698.76 977.25 671.00 999.75 1055.65 653.16 814.89 1016.23 1223.02 ## [28] 785.00 3907.75 3679.00 2618.95 3115.58 2474.74 3199.25 3695.00 3617.00 ## [37] 3607.63 3550.26 3619.80 3447.75 2670.28 2660.75 3262.11 1587.50 3215.00 ## [46] 2671.75 2789.00 2646.00 2715.30 1321.75 3449.00 3362.63 3315.25 2300.00 ## [55] 2754.25 3028.42 424.47 482.25 469.47 623.06 415.83 509.75 478.24 ## [64] 515.60 315.00 173.00 1094.72 799.06 253.95 944.75 190.26 376.18 ## [73] 440.79 441.30 345.53 478.68 711.75 221.75 158.25 719.25 275.00 ## [82] 418.50 440.50 261.32 1264.85 918.07 1110.38 1171.68 893.31 1168.29 ## [91] 1038.53 1150.23 1277.07 821.88 805.21 1195.68 655.47 695.64 988.79 ## [100] 1162.33 1556.57 876.80 868.72 1135.47 1582.41 761.53 549.38 840.05 ## [109] 1405.12 540.47 774.07 602.94 Thus, this gives every one of the 112 observations on plot yield, in the order in which they appear in the data frame. You can, alternatively, use the form data[row,column]. For example, if you only want to see the data point in the third row and third column. mydata[3,3] ## [1] 2 The same idea can be used to see only the first row, and all columns. mydata[1,] ## location plot rep row col variety farmers_eval yield yield_first ## 1 Molise 1 1 1 1 Var. A 3.24 789.25 11 ## perc_mark_yield mean_fruit_weight ## 1 57.46 17.43 Or also, it could be useful to see rows 1, 2 and 3, and only the first column. mydata[c(1,2,3),1] ## [1] &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; You can also call columns by their names. In this case, lines 1 to 10 of the Farmers Evaluations mydata[1:10, &quot;farmers_eval&quot;] ## [1] 3.24 2.71 3.35 3.24 3.24 3.06 2.88 3.24 2.94 2.88 Vector arithmetics In the same way in which you can do arithmetics with simple numbers (as seen before), you can do it with vectors (a series of numbers). Also, if you use introduce a hashtag (#) in your text editor or console, you can freely write text that explains what you are doing. For example: # Define a v vector v &lt;- c(10,20, 30, 40, 50) # Define a w vector w &lt;- c(1, 2, 3, 4, 5) # Add them up to create a t vector t= v + w # t is the sum of v and w t ## [1] 11 22 33 44 55 Create a new column. Using vector arithmetics we could create new columns in our data frame, done through calculations performed with the existing columns. For example, in our particular data set, we have data for total yield and the data for percentage of marketable yield. A simple way to obtain only the marketable yield, would be to multiply the total yield with the percentage of marketable yield. This will create a new vector which we will simply call newvector newvector &lt;- mydata$yield * mydata$perc_mark_yield Once you created the vector, you can add it to the data frame. You can also do it directly, but we chose it this way to make it simpler to understand. mydata$mark_yield &lt;- newvector 3.4 Basic Statistics and Plots Minimal statistics Now that we know how to call an specifical column in the data frame, it is possible to perform some basic statistics on these variables. Estimate the mean of a variable. mean(mydata$yield) ## [1] 1334.865 Estimate the median. median(mydata$yield) ## [1] 906.545 Estimate the standard deviation. sd(mydata$yield) ## [1] 1055.797 A simple plot. Using the function plot() we can create simple exploratory graphs, which will appear on the lower right pannel. plot( x= mydata$farmers_eval, # My x axis y= mydata$yield, # My y axis xlab= &quot;Yield per plant (kg)&quot;, # My x label ylab= &quot;Farmer&#39;s Evaluation&quot; ) # My y label Another simple plot. We could, for example plot the harvest data for each location. But first, we will check if the data types are right. str(mydata) ## &#39;data.frame&#39;: 112 obs. of 12 variables: ## $ location : chr &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; &quot;Molise&quot; ... ## $ plot : int 1 2 3 4 5 6 7 8 9 10 ... ## $ rep : int 1 1 2 2 1 1 2 2 1 1 ... ## $ row : int 1 2 3 4 1 2 3 4 1 2 ... ## $ col : int 1 1 1 1 2 2 2 2 3 3 ... ## $ variety : chr &quot;Var. A&quot; &quot;Var. D&quot; &quot;Var. I&quot; &quot;Var. N&quot; ... ## $ farmers_eval : num 3.24 2.71 3.35 3.24 3.24 3.06 2.88 3.24 2.94 2.88 ... ## $ yield : num 789 498 822 846 1083 ... ## $ yield_first : num 11 0 24.9 46.8 28.2 ... ## $ perc_mark_yield : num 57.5 55.8 76 55.3 81.2 ... ## $ mean_fruit_weight: num 17.43 7.37 35.54 14.19 68.85 ... ## $ mark_yield : num 45350 27750 62464 46828 88002 ... Looks like the location is a character variable. This means that it is just a loose string of text. We rather want it to be a factor, so that all observations with the same location can be grouped in plots. The function as.factor() allows me to change any type of variable into a factor mydata$location = as.factor(mydata$location) And now we can do the plot. plot( x= mydata$location, y=mydata$yield, ylab= &quot;Yield per plant (kg)&quot;, xlab= &quot;Location&quot;) Subsetting your data. Suppose you only want to work with a section of your data frame, for example, only the data for one location. There are many ways to do this, a rather simple one is using the function subset() soloRotonda &lt;- subset(mydata, mydata$location == &quot;Rotonda&quot;) nrow(soloRotonda) ## [1] 28 Notice how we created a new subset, only with data from Rotonda. After checking, we see it has only 28 rows, as there were only 28 plots per location.. Notice also how we used the == sign, to express a logical function stating the location had to be equal to Rotonda In R, the other characters to indicate logical expressions are: * &#39;==&#39; for equal\\ * &#39;!=&#39; for different \\ * &#39;&lt;,&gt;&#39; less than, more than \\ * &#39;&lt;=&#39; less or equal to \\ * &#39;&gt;=&#39; more or equal to \\ * &#39;&amp;&#39; if we want one condition AND another. * &quot;|&quot; if we Want one condition OR another. For example, we can select only the data for Rotonda, and only varieties A and B. If we check how many row we have now, we will see that, as expected we only have two rows, two for Var. A and 2 for Var. B. Var.AB_Rotonda &lt;- subset(mydata, mydata$location == &quot;Rotonda&quot; &amp; #And mydata$variety == &quot;Var. A&quot; | #Or mydata$location == &quot;Rotonda&quot; &amp; #And mydata$variety == &quot;Var. B&quot; ) nrow(Var.AB_Rotonda) ## [1] 4 3.5 Packages in R. Packages are what keeps the R community growing, as virtually anyone can create and upload a package in R. A package can be loosely defined as a group of functions that serve to a certain objective or area of study. Some of them are very useful to treat and analyze data from varietial trials and PPB programs, and we will see many examples later. Downloading and installing them is very easy, you have mostly two options. The simplest is to click on Tools &gt; Install Packages &gt; and write the package name. This works as long as the package is on the CRAN repositoy, which is the official R repository where developers upload packages. To make it easier, and embeded into your code, you could also write install.packages(&quot;yourpackagename&quot;) #Don&#39;t try this! It&#39;s only an example! Once installed, you have to call it so that it is active on R. This is true for every time you open R. library(yourpackagename) #Again, don&#39;t try this. We will use and install several packages in the following chapters. 3.6 Final considerations Ask questions! Its very hard to know (and to remember!) how everything is done in R. And, like any language, the only way to become fluent is to practice often. There will always be things that you might want to do, and which are not included in this very small manual. For those cases, curiosity is a gread advantage, and here is some small advice about how to proceed. Examples: When you wish to better understand a function and its arguments, you can type ?functionname (and changing functionname for your actual function). This will display a window on the left lower panel which explains thoroughly the function and how is it done. When you want to something in particular, but are not sure how to do it in R, A great approach is just to google: How to _____ in R. This can get you out of many troubles, the tricky part is finding out how to ask the proper question. When you run a piece of code and receive an error (usually displayed with red letters on the console) try to read them and see what they mean. Sometimes, these errors are hard to interpret, and one good approach is to copy-paste them in google, and see who was suffered from this before. To learn more These are just some sources to learn more about R: The basic book is the R Cookbook. This site offers plenty of information with nice tutorials: STHDA This is a cool blog where people ask questions you might have: Stack Overflow "]]
