"? Assente" = "4_Assente"))
#Fix Parcella si no
table(mydata$Parcella.SI.NO)
#libs
library(dplyr)
setwd("C:/Users/Usuario1/Google Drive/RSR/DB & Fieldbook/Integrazione dati grano")
#Caricare datti
marzo.cancello <- read.csv("C:/Users/Usuario1/Google Drive/RSR/DB & Fieldbook/Integrazione dati grano/Marzo Cancello Est 2021.csv")
marzo.pastificcio <- read.csv("C:/Users/Usuario1/Google Drive/RSR/DB & Fieldbook/Integrazione dati grano/Marzo Pastificcio 2021.csv")
aprile.cancello <- read_excel("Aprile Campo Cancello Esterno 2021.xlsx")
aprile.pastificcio <- read_excel("Aprile Campo Pastificcio 2021.xlsx")
maggio.cancello <- read.csv("Maggio Campo Cancello Esterno.csv")
maggio.pastificcio <- read.csv("Maggio Campo Pastificcio 2021.csv")
giugnio.cancello <-   read.csv("Giugno Campo Cancello Esterno 2021.csv")
giugnio.pastificcio  <-read.csv("Giugno Campo Pastificcio 2021.csv"  )
luglio.cancello <- read_excel("LuglioCampo Cancello.xlsx" )
luglio.pastificcio <- read_excel("Luglio Campo Pastificcio.xlsx")
#Giving months
marzo.cancello$mese = "marzo"
aprile.cancello$mese = "aprile"
maggio.cancello$mese = "maggio"
giugnio.cancello$mese = "giugnio"
luglio.cancello$mese = "luglio"
marzo.pastificcio$mese = "marzo"
aprile.pastificcio$mese = "aprile"
maggio.pastificcio$mese = "maggio"
giugnio.pastificcio$mese = "giugnio"
luglio.pastificcio$mese = "luglio"
#Setting names
#Marzo
setdiff(names(marzo.cancello), names(marzo.pastificcio))
setdiff(names(aprile.cancello), names(aprile.pastificcio))
setdiff(names(maggio.cancello), names(maggio.pastificcio))
setdiff( names(maggio.pastificcio),names(maggio.cancello))
#Bind them all
library(plyr)
mybind=  rbind.fill (marzo.cancello, marzo.pastificcio, aprile.cancello, aprile.pastificcio, maggio.cancello, maggio.pastificcio, giugnio.cancello, giugnio.pastificcio)
sort(names(mybind))
#Fix epigenetics
mybind[mybind$plot_id == "EPG01", "entry_name"] = 	"Villa Glori/RSR (mutico)"
mybind[mybind$plot_id == "EPG01", "RSR_code"] =	"RSR04161"
mybind[mybind$plot_id == "EPG02", "entry_name"] = 	"Vilmorin 27"
mybind[mybind$plot_id == "EPG02", "RSR_code"] =	"RSR04162"
mybind[mybind$plot_id == "EPG03", "entry_name"] = 	"Frassineto (?)"
mybind[mybind$plot_id == "EPG03", "RSR_code"] =	"RSR04163"
mybind[mybind$plot_id == "EPG04", "entry_name"] = 	"Abbondanza/RSR (mutica)"
mybind[mybind$plot_id == "EPG04", "RSR_code"] =	"RSR04164"
mybind[mybind$plot_id == "EPG05", "entry_name"] = 	"Leone"
mybind[mybind$plot_id == "EPG05", "RSR_code"] =	"RSR04165"
mybind[mybind$plot_id == "EPG06", "entry_name"] = 	"Bologna"
mybind[mybind$plot_id == "EPG06", "RSR_code"] =	"RSR04166"
#Select columns
library(dplyr)
x= paste(names(mybind), collapse= ",")
x
mydata = mybind %>% select(plot_id, Fila, RSR_code,"Mese" = mese,Serial, Nome.Campionatore, location.GPS,
Parcella.SI.NO,Parcella.Numero.Piante,
Copertura.Parcella,Colore.Piante,Colore.Altro,
Infestanti.Numero,Infestanti.Tipo,
Danni,Danni.Foto,Osservazioni,Osservazioni.Foto,
Allettamento,Allettamento.Causa,
Malattie,Malattie.Notes,   Foto.Malattia,
Maturita.Spighe, Presenza.reste,Presenza.di.cere,
P1_Alt.1.rachide,P1_Alt.2.spiga,P2_Alt.1.rachide, P2_Alt.2.spiga,
P3_Alt.1.rachide, P3_Alt.2.spiga,P4_Alt.1.rachide,  P4_Alt.2.spiga,
P5_Alt.1.rachide,P5_Alt.2.spiga,P6_Alt.1.rachide,P6_Alt.2.spiga,
P7_Alt.1.rachide,P7_Alt.2.spiga,P8_Alt.1.rachide,P8_Alt.2.spiga,
P9_Alt.1.rachide,P9_Alt.2.spiga,P10_Alt.1.rachide,P10_Alt.2.spiga,
Parcella.Foto,RGV.FAO.Foto,RGV.FAO )
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c(31,33,35,37,39,41,43)], na.rm = T)
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c(32,34,36,38,40,42,44)], na.rm = T)
#Controllare
library(ggplot2)
ggplot(mydata, aes(x= plot_id, y = Media_Alt.1.rachide))+
geom_point()
#Fix Parcella si no
table(mydata$Parcella.SI.NO)
mydata$Parcella.SI.NO = revalue(mydata$Parcella.SI.NO, c("2_Metaï¿½"= "2_Metà",
"2_Meta"= "2_Metà",
"2_MetÃ" = "2_Metà",
"2_MetÃ "= "2_Metà",
"? Assente" = "4_Assente"))
table(mydata$Parcella.SI.NO)
mydata$Parcella.SI.NO = revalue(mydata$Parcella.SI.NO, c("2_Metaï¿½"= "2_Metà",
"2_MetÃ" = "2_Metà",
"2_MetÃ "= "2_Metà",
"? Assente" = "4_Assente"))
mydata[grep("Met_", mydata)] <- "2_Metà"
table(mydata$Parcella.SI.NO)
mydata[grep("_Met_", mydata)] <- "2_Metà"
table(mydata$Parcella.SI.NO)
mydata[grep("_Met_", mydata)]
mydata[grep("*Met*", mydata)]
mydata[grep("*Met*", mydata),]
mydata[grep("*Met*", mydata),"Parcella.SI.NO"]
mydata[grep("Met", mydata),"Parcella.SI.NO"]
mydata[grep("Met", mydata$Parcella.SI.NO),"Parcella.SI.NO"]
mydata[grep("Met", mydata$Parcella.SI.NO),"Parcella.SI.NO"] =  "2_Metà"
table(mydata$Parcella.SI.NO)
mydata = mybind %>% select(plot_id, entry_name, Fila, RSR_code,"Mese" = mese,Serial, Nome.Campionatore, location.GPS,
Parcella.SI.NO,Parcella.Numero.Piante,
Copertura.Parcella,Colore.Piante,Colore.Altro,
Infestanti.Numero,Infestanti.Tipo,
Danni,Danni.Foto,Osservazioni,Osservazioni.Foto,
Allettamento,Allettamento.Causa,
Malattie,Malattie.Notes,   Foto.Malattia,
Maturita.Spighe, Presenza.reste,Presenza.di.cere,
P1_Alt.1.rachide,P1_Alt.2.spiga,P2_Alt.1.rachide, P2_Alt.2.spiga,
P3_Alt.1.rachide, P3_Alt.2.spiga,P4_Alt.1.rachide,  P4_Alt.2.spiga,
P5_Alt.1.rachide,P5_Alt.2.spiga,P6_Alt.1.rachide,P6_Alt.2.spiga,
P7_Alt.1.rachide,P7_Alt.2.spiga,P8_Alt.1.rachide,P8_Alt.2.spiga,
P9_Alt.1.rachide,P9_Alt.2.spiga,P10_Alt.1.rachide,P10_Alt.2.spiga,
Parcella.Foto,RGV.FAO.Foto,RGV.FAO )
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c(31,33,35,37,39,41,43)], na.rm = T)
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c(32,34,36,38,40,42,44)], na.rm = T)
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c(31,33,35,37,39,41,43)], na.rm = T)
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c("P1_Alt.1.rachide",
"P1_Alt.1.rachide",
"P1_Alt.1.rachide",
"P1_Alt.1.rachide",
"P1_Alt.1.rachide",
)], na.rm = T)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c("P1_Alt.1.rachide",
"P2_Alt.1.rachide",
"P3_Alt.1.rachide",
"P4_Alt.1.rachide",
"P5_Alt.1.rachide",
"P6_Alt.1.rachide",
"P7_Alt.1.rachide",
"P8_Alt.1.rachide",
"P9_Alt.1.rachide",
"P10_Alt.1.rachide",
)], na.rm = T)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c("P1_Alt.1.rachide",
"P2_Alt.1.rachide",
"P3_Alt.1.rachide",
"P4_Alt.1.rachide",
"P5_Alt.1.rachide",
"P6_Alt.1.rachide",
"P7_Alt.1.rachide",
"P8_Alt.1.rachide",
"P9_Alt.1.rachide",
"P10_Alt.1.rachide"
)], na.rm = T)
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
"P2_Alt.2.spiga",
"P3_Alt.2.spiga",
"P4_Alt.2.spiga",
"P5_Alt.2.spiga",
"P6_Alt.2.spiga",
"P7_Alt.2.spiga",
"P8_Alt.2.spiga",
"P9_Alt.2.spiga",
"P10_Alt.2.spiga")], na.rm = T)
"P8_Alt.2.spiga",
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
"P2_Alt.2.spiga",
"P3_Alt.2.spiga",
"P4_Alt.2.spiga",
"P5_Alt.2.spiga",
"P6_Alt.2.spiga",
"P7_Alt.2.spiga",
"P8_Alt.2.spiga",
"P9_Alt.2.spiga",
"P10_Alt.2.spiga")], na.rm = T)
#Controllare
library(ggplot2)
ggplot(mydata, aes(x= plot_id, y = Media_Alt.1.rachide))+
geom_point()
shapiro.test(mydata$Media_Alt.1.rachide)
mydata$Parcella.SI.NO = revalue(mydata$Parcella.SI.NO, c("2_Metaï¿½"= "2_Metà",
"2_MetÃ" = "2_Metà",
"2_MetÃ "= "2_Metà",
"? Assente" = "4_Assente"))
mydata[grep("Met", mydata$Parcella.SI.NO),"Parcella.SI.NO"] =  "2_Metà"
mydata[mydata$entry,"Parcella.SI.NO"] =  "2_Metà"
table(mydata$Parcella.SI.NO)
mydata = mybind %>% select(plot_id, entry_name,  RSR_code,"Mese" = mese,Serial, Nome.Campionatore, location.GPS,
Parcella.SI.NO,Parcella.Numero.Piante,
Copertura.Parcella,Colore.Piante,Colore.Altro,
Infestanti.Numero,Infestanti.Tipo,
Danni,Danni.Foto,Osservazioni,Osservazioni.Foto,
Allettamento,Allettamento.Causa,
Malattie,Malattie.Notes,   Foto.Malattia,
Maturita.Spighe, Presenza.reste,Presenza.di.cere,
P1_Alt.1.rachide,P1_Alt.2.spiga,P2_Alt.1.rachide, P2_Alt.2.spiga,
P3_Alt.1.rachide, P3_Alt.2.spiga,P4_Alt.1.rachide,  P4_Alt.2.spiga,
P5_Alt.1.rachide,P5_Alt.2.spiga,P6_Alt.1.rachide,P6_Alt.2.spiga,
P7_Alt.1.rachide,P7_Alt.2.spiga,P8_Alt.1.rachide,P8_Alt.2.spiga,
P9_Alt.1.rachide,P9_Alt.2.spiga,P10_Alt.1.rachide,P10_Alt.2.spiga,
Parcella.Foto,RGV.FAO.Foto,RGV.FAO )
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c("P1_Alt.1.rachide",
"P2_Alt.1.rachide",
"P3_Alt.1.rachide",
"P4_Alt.1.rachide",
"P5_Alt.1.rachide",
"P6_Alt.1.rachide",
"P7_Alt.1.rachide",
"P8_Alt.1.rachide",
"P9_Alt.1.rachide",
"P10_Alt.1.rachide"
)], na.rm = T)
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
"P2_Alt.2.spiga",
"P3_Alt.2.spiga",
"P4_Alt.2.spiga",
"P5_Alt.2.spiga",
"P6_Alt.2.spiga",
"P7_Alt.2.spiga",
"P8_Alt.2.spiga",
"P9_Alt.2.spiga",
"P10_Alt.2.spiga")], na.rm = T)
#Controllare
library(ggplot2)
ggplot(mydata, aes(x= plot_id, y = Media_Alt.1.rachide))+
geom_point()
shapiro.test(mydata$Media_Alt.1.rachide)
#Fix Parcella si no
table(mydata$Parcella.SI.NO)
mydata$Parcella.SI.NO = revalue(mydata$Parcella.SI.NO, c("2_Metaï¿½"= "2_Metà",
"2_MetÃ" = "2_Metà",
"2_MetÃ "= "2_Metà",
"? Assente" = "4_Assente"))
mydata[grep("Met", mydata$Parcella.SI.NO),"Parcella.SI.NO"] =  "2_Metà"
mydata[mydata$entry,"Parcella.SI.NO"] =  "2_Metà"
table(mydata$Parcella.SI.NO)
source('C:/Users/Usuario1/Google Drive/RSR/DB & Fieldbook/Integrazione dati grano/Integrazione dati.R', encoding = 'UTF-8', echo=TRUE)
mydata = mybind %>% select(plot_id, entry_name,  RSR_code,"Mese" = Mese, Nome.Campionatore, location.GPS,
Parcella.SI.NO,Parcella.Numero.Piante,
Copertura.Parcella,Colore.Piante,Colore.Altro,
Infestanti.Numero,Infestanti.Tipo,
Danni,Danni.Foto,Osservazioni,Osservazioni.Foto,
Allettamento,Allettamento.Causa,
Malattie,Malattie.Notes,   Foto.Malattia,
Maturita.Spighe, Presenza.reste,Presenza.di.cere,
P1_Alt.1.rachide,P1_Alt.2.spiga,P2_Alt.1.rachide, P2_Alt.2.spiga,
P3_Alt.1.rachide, P3_Alt.2.spiga,P4_Alt.1.rachide,  P4_Alt.2.spiga,
P5_Alt.1.rachide,P5_Alt.2.spiga,P6_Alt.1.rachide,P6_Alt.2.spiga,
P7_Alt.1.rachide,P7_Alt.2.spiga,P8_Alt.1.rachide,P8_Alt.2.spiga,
P9_Alt.1.rachide,P9_Alt.2.spiga,P10_Alt.1.rachide,P10_Alt.2.spiga,
Parcella.Foto,RGV.FAO.Foto,RGV.FAO )
names(mydata)
mydata$Media_Alt.1.rachide = rowMeans(mydata[c("P1_Alt.1.rachide",
"P2_Alt.1.rachide",
"P3_Alt.1.rachide",
"P4_Alt.1.rachide",
"P5_Alt.1.rachide",
"P6_Alt.1.rachide",
"P7_Alt.1.rachide",
"P8_Alt.1.rachide",
"P9_Alt.1.rachide",
"P10_Alt.1.rachide"
)], na.rm = T)
mydata$Media_Alt.2.spiga =   rowMeans(mydata[c("P1_Alt.2.spiga",
"P2_Alt.2.spiga",
"P3_Alt.2.spiga",
"P4_Alt.2.spiga",
"P5_Alt.2.spiga",
"P6_Alt.2.spiga",
"P7_Alt.2.spiga",
"P8_Alt.2.spiga",
"P9_Alt.2.spiga",
"P10_Alt.2.spiga")], na.rm = T)
#Controllare
library(ggplot2)
ggplot(mydata, aes(x= plot_id, y = Media_Alt.1.rachide))+
geom_point()
shapiro.test(mydata$Media_Alt.1.rachide)
#Fix Parcella si no
table(mydata$Parcella.SI.NO)
mydata$Parcella.SI.NO = revalue(mydata$Parcella.SI.NO, c("2_Metaï¿½"= "2_Metà",
"2_MetÃ" = "2_Metà",
"2_MetÃ "= "2_Metà",
"? Assente" = "4_Assente"))
mydata[grep("Met", mydata$Parcella.SI.NO),"Parcella.SI.NO"] =  "2_Metà"
mydata[mydata$entry,"Parcella.SI.NO"] =  "2_Metà"
table(mydata$Parcella.SI.NO)
write.csv(mydata, "Compiled and curated data.csv")
#Fix
table(mydata$Copertura.Parcella)
table(mydata$Colore.Piante)
table(mydata$Infestanti.Tipo)
mydata$Infestanti.Tipo= revalue(mydata$Infestanti.Tipo, c("1Uguali" = "1_Uguali",
"2Mono" = "2_Mono",
"2Dico" = "3_Dico",))
mydata$Infestanti.Tipo= revalue(mydata$Infestanti.Tipo, c("1Uguali" = "1_Uguali",
"2Mono" = "2_Mono",
"2Dico" = "3_Dico"))
mydata$Infestanti.Tipo= revalue(mydata$Infestanti.Tipo, c("1Uguali" = "1_Uguali",
"2Mono" = "2_Mono",
"3Dico" = "3_Dico"))
table(mydata$Allettamento)
source('C:/Users/Usuario1/Google Drive/RSR/DB & Fieldbook/Integrazione dati grano/Integrazione dati.R', encoding = 'UTF-8', echo=TRUE)
mydata <- read.csv("tomatoMLT2020.csv")
mydata <- read.csv("tomatoMLT2020.csv")
mydata <- read.csv("tomatoMLT2020.csv")
newdataframe <- dplyr::select(mydata, location, variety, rep, mean_fruit_weight)
?select
adj.means = predict(spats.Sestola, which = 'variety')
adj.means
#Poso fare il plot subito
ggplot(adj.means, aes(x= variety, y = predicted.values))+
geom_bar(stat= "identity", fill = "tomato")+
geom_errorbar( aes(ymax = predicted.values+ standard.errors,
ymin = predicted.values- standard.errors))
ggplot(data.Sestola, aes(x=row, y = col, label= variety, fill = yield))+
geom_tile()+
geom_text()+
scale_fill_gradientn(colors=c("blue", "lightblue", "green3", "yellow", "red"))
data.Sestola <- subset(data, loc == "Sestola")
data.Sestola <- subset(data, location == "Sestola")
mydata <- read.csv("tomatoMLT2020.csv")
data.Sestola <- subset(data, location == "Sestola")
data.Sestola <- subset(data, loca== "Sestola")
data.Sestola <- subset(data, loc== "Sestola")
mydata <- read.csv("tomatoMLT2020.csv")
data.Sestola <- subset(data, loc== "Sestola")
data.Sestola <- subset(data, location == "Sestola")
data.Sestola <- subset(mydata, location == "Sestola")
ggplot(data.Sestola, aes(x=row, y = col, label= variety, fill = yield))+
geom_tile()+
geom_text()+
scale_fill_gradientn(colors=c("blue", "lightblue", "green3", "yellow", "red"))
library(ggplot2)
ggplot(data.Sestola, aes(x=row, y = col, label= variety, fill = yield))+
geom_tile()+
geom_text()+
scale_fill_gradientn(colors=c("blue", "lightblue", "green3", "yellow", "red"))
mylocs = unique(data$loc) # La funzione unique prende i valori unici di un vettore
mylocs
mylocs = unique(data$loc) # La funzione unique prende i valori unici di un vettore
mylocs = unique(mydata$loc) # La funzione unique prende i valori unici di un vettore
mylocs
ggplot(data= all.means,                     # Our data frame
aes(x=variety,                       # Variety is the x axis
y=yield_adj_mean))+              # Yield Adjusted Means are the y axis
geom_bar(stat='identity',                 # The bars are plotted according to the identity actual values in the cells
fill= "tomato")+                 # and filled with "tomato" color
facet_wrap(loc~.)+                        # Make a facet per each location
labs(x= "Genotype",y= "Yield")  +         # Axis labels
geom_errorbar(                            #Error bars
aes(ymin=yield_adj_mean - yield_sd,
ymax=yield_adj_mean + yield_sd),
width=0.2)
mydata <- read.csv("tomatoMLT2020.csv")
View(mydata)
ggplot(data= all.means,                     # Our data frame
aes(x=variety,                       # Variety is the x axis
y=yield_adj_mean))+              # Yield Adjusted Means are the y axis
geom_bar(stat='identity',                 # The bars are plotted according to the identity actual values in the cells
fill= "tomato")+                 # and filled with "tomato" color
facet_wrap(loc~.)+                        # Make a facet per each location
labs(x= "Genotype",y= "Yield")  +         # Axis labels
geom_errorbar(                            #Error bars
aes(ymin=yield_adj_mean - yield_sd,
ymax=yield_adj_mean + yield_sd),
width=0.2)+
geom_point(data= mydata, aes(x= variety,y=yield), col= "darkgreen")+   # A point for every raw yield observation
geom_point(data= mydata, aes(x= variety,y=yield), stat = "summary",    # And a cross for the mean of the rar observations.
fun = "mean", col= "darkgreen", shape= 4)
mylocs = unique(mydata$loc) # The unique() function takes the unique values from a vector
mylocs
mylocs = unique(mydata$loc) # The unique() function takes the unique values from a vector
mylocs
Now, we will draw the loop. The main function is **for()** followed by curly braces {}. The **for()** defines a how to go over the loop; we will write **for (i in mylocs)** meaning that *i* is a variable that will take the value of each one of the elements in my list (the location names). And then, everything inside the curly braces is what will be done with i being a given value within the list
```{r}
for (i in mylocs){                                    # i is a variable that will take the value of every element in mylocs
myenv = i                                           # Define "myenv" as whatever we have in i
mysubset= subset(mydata, location == i)                     # Make a subset with environment i
myspats =  SpATS(response = "yield",                # This is the SpATS function we saw before
genotype = "variety",
genotype.as.random = F,
data=      mysubset,                 # The data is coming from the specific subset done within the loop
spatial = ~ SAP(row, col))
adjusted.means <- predict(myspats,                  #  With "myspats", we estimate the adjusted means
which = "variety")
adjusted.means$location <- myenv                         # To our "adjusted.means" data frame, we add a column with the name of environment
assign(value  = adjusted.means[,c(6,1,4,5)],        # I want to save the adjusted means object (rearrangin column order)
x=  paste0("means.",myenv))                  # with a new name define as "means.myenv", where myenv is the actual name of the environment
}
library (SpATS)
spats.Sestola  =    SpATS(data=      data.Sestola,    #My subset from Sestole
response= "yield",          #The name of my variable
genotype = "variety",       #The name of my genotupe columns
genotype.as.random = F,     #This is a long story. Genotypes set as random or as fixed.
# define my model. In the first case, I will obtain BLUPs
# values, and in the seconed, BLUEs values.
spatial = ~ SAP(row, col))  #This arguments designs the row-column distribution of the field
for (i in mylocs){                                    # i is a variable that will take the value of every element in mylocs
myenv = i                                           # Define "myenv" as whatever we have in i
mysubset= subset(mydata, location == i)                     # Make a subset with environment i
myspats =  SpATS(response = "yield",                # This is the SpATS function we saw before
genotype = "variety",
genotype.as.random = F,
data=      mysubset,                 # The data is coming from the specific subset done within the loop
spatial = ~ SAP(row, col))
adjusted.means <- predict(myspats,                  #  With "myspats", we estimate the adjusted means
which = "variety")
adjusted.means$location <- myenv                         # To our "adjusted.means" data frame, we add a column with the name of environment
assign(value  = adjusted.means[,c(6,1,4,5)],        # I want to save the adjusted means object (rearrangin column order)
x=  paste0("means.",myenv))                  # with a new name define as "means.myenv", where myenv is the actual name of the environment
}
all.means <- rbind(means.Castronuovo, means.Molise, means.Rotonda, means.Sestola)
#We can additionally change some column names to make things more clean
names(all.means)[3] <- "yield_adj_mean"
names(all.means)[4] <- "yield_sd"
ggplot(data= all.means,                     # Our data frame
aes(x=variety,                       # Variety is the x axis
y=yield_adj_mean))+              # Yield Adjusted Means are the y axis
geom_bar(stat='identity',                 # The bars are plotted according to the identity actual values in the cells
fill= "tomato")+                 # and filled with "tomato" color
facet_wrap(location~.)+                        # Make a facet per each location
labs(x= "Genotype",y= "Yield")  +         # Axis labels
geom_errorbar(                            #Error bars
aes(ymin=yield_adj_mean - yield_sd,
ymax=yield_adj_mean + yield_sd),
width=0.2)+
theme(axis.text.x = element_text(angle =90))
ggplot(data= all.means,                     # Our data frame
aes(x=variety,                       # Variety is the x axis
y=yield_adj_mean))+              # Yield Adjusted Means are the y axis
geom_bar(stat='identity',                 # The bars are plotted according to the identity actual values in the cells
fill= "tomato")+                 # and filled with "tomato" color
facet_wrap(location~.)+                        # Make a facet per each location
labs(x= "Genotype",y= "Yield")  +         # Axis labels
geom_errorbar(                            #Error bars
aes(ymin=yield_adj_mean - yield_sd,
ymax=yield_adj_mean + yield_sd),
width=0.2)+
theme(axis.text.x = element_text(angle =90))
setwd("C:/Users/Usuario1/Documents/Github/PPB-Toolkit")
library(metan)
mydata <- read.csv("tomatoMLT2020.csv")
mydata <- read.csv("tomatoMLT2020.csv")
gge_model <-  gge(mydata,               #data set (si possono usare anche le medie aggiustate
env = loc,          #colonna ambiente
gen = variety,      #colona genotipo
resp= yield,        #colona risposta o variabile
scaling = 1)        #Scalare con la desv. std. per normalizare i ambienti
gge_model <-  gge(mydata,               #data set (si possono usare anche le medie aggiustate
env = location,          #colonna ambiente
gen = variety,      #colona genotipo
resp= yield,        #colona risposta o variabile
scaling = 1)        #Scalare con la desv. std. per normalizare i ambienti
plot(gge_model,
col.gen = "grey",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
library(ggplot2)
plot(gge_model,
col.gen = "grey",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
plot(gge_model,
col.gen = "darkgrey",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
plot(gge_model,
col.gen = "blue",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
plot(gge_model,
col.gen = "green",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
col.gen = "gray,
plot(gge_model,
col.gen = "gray",
plot(gge_model,
col.gen = "gray",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
plot(gge_model,
col.gen = "dimgray",
col.env = "red",                            # Changing the color of the labels for genotype and environment
size.text.env= 7,                           # Changing the size of the labels for genotype and environment
size.text.gen = 8)+                         # The metan function arrives up to here, from now on, we add pieces
labs(title = "My GGE Biplot")+              # We can change the title font size
theme(title = element_text(size= 20),          # Cambiare la dimensioni delle intestature ed altri testi
axis.title = element_text(size= 20))
